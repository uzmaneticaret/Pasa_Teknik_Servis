const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedSampleData() {
  try {
    console.log('üå± Creating sample data...');

    // Create customers
    const customers = await Promise.all([
      prisma.customer.create({
        data: {
          name: 'Ahmet Kaya',
          email: 'ahmet@example.com',
          phone: '0533 123 4567',
          address: 'ƒ∞stanbul, Kadƒ±k√∂y'
        }
      }),
      prisma.customer.create({
        data: {
          name: 'Fatma Yƒ±lmaz',
          email: 'fatma@example.com',
          phone: '0534 123 4567',
          address: 'Ankara, √áankaya'
        }
      }),
      prisma.customer.create({
        data: {
          name: 'Mehmet √ñzkan',
          email: 'mehmet@example.com',
          phone: '0535 123 4567',
          address: 'ƒ∞zmir, Konak'
        }
      })
    ]);

    console.log(`‚úÖ Created ${customers.length} customers`);

    // Get admin user
    const admin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!admin) {
      console.log('‚ùå Admin user not found. Please create admin first.');
      return;
    }

    // Create services
    const services = await Promise.all([
      prisma.service.create({
        data: {
          serviceNumber: 'SRV-2025-001',
          customerId: customers[0].id,
          technicianId: admin.id,
          deviceType: 'PHONE',
          brand: 'Samsung',
          model: 'Galaxy S23',
          serialNumber: 'SM123456789',
          imei: '356938035643809',
          problemDescription: 'Ekran √ßatladƒ±, dokunma sorunu var',
          accessories: 'Kƒ±lƒ±f, ≈ûarj Kablosu',
          physicalCondition: 'Genel durumu iyi, sadece ekran hasarlƒ±',
          estimatedFee: 1500.00,
          status: 'RECEIVED'
        }
      }),
      prisma.service.create({
        data: {
          serviceNumber: 'SRV-2025-002',
          customerId: customers[1].id,
          technicianId: admin.id,
          deviceType: 'LAPTOP',
          brand: 'HP',
          model: 'Pavilion Gaming',
          serialNumber: 'HP987654321',
          problemDescription: 'A√ßƒ±lmƒ±yor, g√º√ß sorunu',
          accessories: '≈ûarj Adapt√∂r√º, Mouse',
          physicalCondition: 'Dƒ±≈ü g√∂r√ºn√ºm temiz',
          estimatedFee: 800.00,
          status: 'DIAGNOSIS_PENDING'
        }
      }),
      prisma.service.create({
        data: {
          serviceNumber: 'SRV-2025-003',
          customerId: customers[2].id,
          technicianId: admin.id,
          deviceType: 'TABLET',
          brand: 'Apple',
          model: 'iPad Air',
          serialNumber: 'AP456789123',
          problemDescription: 'Batarya ≈üi≈ümi≈ü, ≈üarj olmuyor',
          accessories: '≈ûarj Kablosu, Kutu',
          physicalCondition: 'Arka kapak hafif √ßƒ±kƒ±k',
          estimatedFee: 1200.00,
          status: 'CUSTOMER_APPROVAL_PENDING'
        }
      })
    ]);

    console.log(`‚úÖ Created ${services.length} services`);

    // Create financial records
    const financialRecords = await Promise.all([
      prisma.financialRecord.create({
        data: {
          serviceId: services[0].id,
          amount: 1500.00,
          type: 'INCOME',
          description: 'Samsung Galaxy S23 ekran deƒüi≈üimi'
        }
      }),
      prisma.financialRecord.create({
        data: {
          amount: 50.00,
          type: 'EXPENSE',
          description: 'Malzeme tedarik'
        }
      })
    ]);

    console.log(`‚úÖ Created ${financialRecords.length} financial records`);

    console.log('üéâ Sample data created successfully!');
    console.log('üìä Summary:');
    console.log(`   - ${customers.length} customers`);
    console.log(`   - ${services.length} services`);
    console.log(`   - ${financialRecords.length} financial records`);
    
  } catch (error) {
    console.error('‚ùå Error creating sample data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedSampleData();
